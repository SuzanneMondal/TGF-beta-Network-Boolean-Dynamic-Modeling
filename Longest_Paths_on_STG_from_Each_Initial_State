
% Recursive function to build longest paths
function longestPaths = recursive(G, longestPaths, numLongestPaths)

% Find if successors present of current longest path(s)
successorsLogical = zeros(1, numLongestPaths); % Initialize array containing logical values for presence of successors

for inLongestPaths = 1:numLongestPaths % Iterate through every longest path

    endNode = longestPaths{inLongestPaths}(end); % Extract last node in current longest path

    successorsList = successors(G, endNode); % Extract all successors of last node

    haveSuccessor = ~isempty(successorsList); % Check if successors of last node present

    successorsLogical(inLongestPaths) = haveSuccessor; % Update status of successor(s) presence

end

pathsToUpdate = find(successorsLogical == 1); % Logical 1 for longest paths with end node successors

% Add successors to current longest paths
if any(successorsLogical) % For successor(s) present for any longest path

    % Prevent further recursion if each last node of every path has only one successor that's same as last node
    sameSuccessorArray = zeros(1, length(longestPaths)); % Initialize array to store logical value for same successor

    for inLongestPaths = 1:length(longestPaths) % Iterate through every longest path

        path = longestPaths{inLongestPaths}; % Extract current longest path

        successorNodes = successors(G, path(end)); % Extract successor(s) of the last node

        numNodeSuccessors = length(successorNodes); % Store number of successors

        if numNodeSuccessors == 1 & successorNodes(1) == path(end) % For the only successor matching with last node

            sameSuccessorArray(inLongestPaths) = 1; % Update same successor status for current path in array

        end

    end

    if all(sameSuccessorArray) % For all longest paths having a single successor same as path's last node

        return % Return control outside recursive function (to invoking function)

    else

        % Do nothing

    end
    
    newLongestPaths = {}; % Initialize cell to store updated longest paths

    for inPathsToUpdate = 1:length(pathsToUpdate) % Iterate through each longest path having end node successor(s)

        pathIndex = pathsToUpdate(inPathsToUpdate); % Extract index of path having successor(s) to last node

        path = longestPaths{pathIndex}; % Extract path with successor

        pathEnd = path(end); % Extract last node in path

        nodeSuccessors = successors(G, pathEnd); % Extract successors of last node

        for inNodeSuccessors = 1:length(nodeSuccessors) % Iterate through array of end node-successors

            currentSuccessorNode = nodeSuccessors(inNodeSuccessors); % Extract current successor among all successors

            if ~ismember(currentSuccessorNode, path) % For current successor not already present in path (to avoid network loops)

                newLongestPaths{end + 1} = [path, currentSuccessorNode]; % Add successor to current path and add updated path to new longest paths array

            else

                continue % Choose next successor node in successors array

            end

        end

    end

    if ~isempty(newLongestPaths) % For new successor not already present in path, variable will not be empty
        
        longestPaths = {}; % Empty longest paths array to repopulate it

        longestPaths = newLongestPaths; % Refill longest paths array

    end

    numLongestPaths = length(longestPaths); % Assign updated number of longest paths to include as argument in recursive function

    disp('longest paths:');
    disp(longestPaths);

    % Recursive function call to find successors of current longest path(s)
    longestPaths = recursive(G, longestPaths, numLongestPaths); % Add new path-end successors recursively

elseif ~any(successorsLogical) % For no successor present for any longest path

    disp(['returning control because no successors for', num2str(longestPaths{1}(1))]);
    return % Return control outside recursive function (to invoking function)

end

end

% Number of initial states (64)
numStates = numnodes(G);

% Function to find longest paths from each node
function longestPathsCell = findLongestPaths(G, numStates)

% Initialize nodes array
allNodes = 1:numStates;

% Initialize variable to store number of longest paths
numLongestPaths = 1; % Only longest path comprises only source node (initially)

% Paths for each initial state (node)
for whichNode = 1:numStates % Iterate through all nodes

    % Extract node
    node = allNodes(whichNode);
    
    % Reset longest paths variable for current node
    longestPaths = {node};

    % Invoke recursive function to find longest path
    longestPathsCell{node} = recursive(G, longestPaths, numLongestPaths);

end

end

% Store longest paths starting from each initial state
longestPathsCell = findLongestPaths(G, numStates); % Generate cell array to store longest paths

for inLongestPathsCell = 1:length(longestPathsCell) % Iterate through longest paths cells for every initial state
    
    disp(longestPathsCell{inLongestPathsCell}); % Extract and display all longest paths of current initial state

end

% Number of occurences of each node (initial state) across all longest paths
counts = zeros(1, 64); % Values in dictionary to store number of node occurences

countsDictionary = dictionary(1:numStates, counts); % Initialize dictionary to store number of node occurences

for inLongestPathsCell = 1:length(longestPathsCell) % Iterate through longest paths cells for every node

    longestPaths = longestPathsCell{inLongestPathsCell}; % Extract longest paths corresponding to current node

    for inEachColumn = 1:length(longestPaths) % Iterate through longest paths corresponding to current node

        currentPath = longestPaths{1}; % Extract current longest path for current node

        for inCurrentPath = 1:length(currentPath) % Iterate through every node in current longest path

            element = currentPath(inCurrentPath); % Extract current node ID

            countsDictionary(element) = countsDictionary(element) + 1; % Update number of occurences corresponding to current node ID

        end

    end

end

% Display dictionary storing number of occurences corresponding to each node
disp(countsDictionary);
