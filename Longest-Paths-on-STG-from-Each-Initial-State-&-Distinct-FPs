% Recursive function to build longest paths
function longestPaths = recursive(G, longestPaths, numLongestPaths)

% Find if successors present of current longest path(s)
successorsLogical = zeros(1, numLongestPaths); % Initialize array containing logical values for presence of successors

for inLongestPaths = 1:numLongestPaths % Iterate through every longest path

    endNode = longestPaths{inLongestPaths}(end); % Extract last node in current longest path

    successorsList = successors(G, endNode); % Extract all successors of last node

    haveSuccessor = ~isempty(successorsList); % Check if successors of last node present

    successorsLogical(inLongestPaths) = haveSuccessor; % Update status of successor(s) presence

end

pathsToUpdate = find(successorsLogical == 1); % Logical 1 for longest paths with end node successors

% Add successors to current longest paths
if any(successorsLogical) % For successor(s) present for any longest path

    % Prevent further recursion if each last node of every path has only one successor that's same as last node
    sameSuccessorArray = zeros(1, length(longestPaths)); % Initialize array to store logical value for same successor

    for inLongestPaths = 1:length(longestPaths) % Iterate through every longest path

        path = longestPaths{inLongestPaths}; % Extract current longest path

        successorNodes = successors(G, path(end)); % Extract successor(s) of the last node

        numNodeSuccessors = length(successorNodes); % Store number of successors

        if numNodeSuccessors == 1 & successorNodes(1) == path(end) % For the only successor matching with last node

            sameSuccessorArray(inLongestPaths) = 1; % Update same successor status for current path in array

        end

    end

    if all(sameSuccessorArray) % For all longest paths having a single successor same as path's last node

        return % Return control outside recursive function (to invoking function)

    else

        % Do nothing

    end
    
    newLongestPaths = {}; % Initialize cell to store updated longest paths

    for inPathsToUpdate = 1:length(pathsToUpdate) % Iterate through each longest path having end node successor(s)

        pathIndex = pathsToUpdate(inPathsToUpdate); % Extract index of path having successor(s) to last node

        path = longestPaths{pathIndex}; % Extract path with successor

        pathEnd = path(end); % Extract last node in path

        nodeSuccessors = successors(G, pathEnd); % Extract successors of last node

        for inNodeSuccessors = 1:length(nodeSuccessors) % Iterate through array of end node-successors

            currentSuccessorNode = nodeSuccessors(inNodeSuccessors); % Extract current successor among all successors

            if ~ismember(currentSuccessorNode, path) % For current successor not already present in path (to avoid network loops)

                newLongestPaths{end + 1} = [path, currentSuccessorNode]; % Add successor to current path and add updated path to new longest paths array

            else

                continue % Choose next successor node in successors array

            end

        end

    end

    if ~isempty(newLongestPaths) % For new successor not already present in path, variable will not be empty
        
        longestPaths = {}; % Empty longest paths array to repopulate it

        longestPaths = newLongestPaths; % Refill longest paths array

    end

    numLongestPaths = length(longestPaths); % Assign updated number of longest paths to include as argument in recursive function

    % Recursive function call to find successors of current longest path(s)
    longestPaths = recursive(G, longestPaths, numLongestPaths); % Add new path-end successors recursively

elseif ~any(successorsLogical) % For no successor present for any longest path

    disp(['returning control because no successors for', num2str(longestPaths{1}(1))]);
    return % Return control outside recursive function (to invoking function)

end

end

% Number of initial states (64)
numStates = numnodes(G);

% Function to find longest paths from each node
function longestPathsCell = findLongestPaths(G, numStates)

% Initialize nodes array
allNodes = 1:numStates;

% Initialize variable to store number of longest paths
numLongestPaths = 1; % Only longest path comprises only source node (initially)

% Paths for each initial state (node)
for whichNode = 1:numStates % Iterate through all nodes

    % Extract node
    node = allNodes(whichNode);
    
    % Reset longest paths variable for current node
    longestPaths = {node};

    % Invoke recursive function to find longest path
    longestPathsCell{node} = recursive(G, longestPaths, numLongestPaths);

end

end

% Store longest paths starting from each initial state
longestPathsCell = findLongestPaths(G, numStates); % Generate cell array to store longest paths

for inLongestPathsCell = 1:length(longestPathsCell) % Iterate through longest paths cells for every initial state
    
    disp(longestPathsCell{inLongestPathsCell}); % Extract and display all longest paths of current initial state

end

% Number of occurences of each node (initial state) across all longest paths 
% and find which fixed points (FPs) occur how frequently at the end of paths based on nodes (states)-particularly for nodes w/ highest number of occurences in longest paths
counts = zeros(1, numStates); % Values in dictionary to store number of node occurences

countsDictionary = dictionary(1:numStates, counts); % Initialize dictionary to store number of node occurences

% There are 3 FPs: 20, 45, 54

Node = [1:64]'; % Initialize table column to store node that's assessed

FP_is_20 = zeros(64, 1); % Initialize table column to store how many times FP followed by node is 20

FP_is_45 = zeros(64, 1); % Initialize table column to store how many times FP followed by node is 45

FP_is_54 = zeros(64, 1); % Initialize table column to store how many times FP followed by node is 54

for inLongestPathsCell = 1:length(longestPathsCell) % Iterate through longest paths cells for every node

    longestPaths = longestPathsCell{inLongestPathsCell}; % Extract longest paths corresponding to current node

    for inEachColumn = 1:length(longestPaths) % Iterate through longest paths corresponding to current node

        currentPath = longestPaths{inEachColumn}; % Extract current longest path for current node

        FPofPath = currentPath(end); % Extract FP at the end of path

        for inCurrentPath = 1:length(currentPath) % Iterate through every node in current longest path

            element = currentPath(inCurrentPath); % Extract current node ID

            countsDictionary(element) = countsDictionary(element) + 1; % Update number of occurences corresponding to current node ID

            % Update table column vectors
            if FPofPath == 20 % For FP of current path is 20

                FP_is_20(element) = FP_is_20(element) + 1; % Update number of paths ending in 20 where current node (element) appears

            elseif FPofPath == 45 % For FP of current path is 45

                FP_is_45(element) = FP_is_45(element) + 1; % Update number of paths ending in 45 where current node (element) appears

            elseif FPofPath == 54 % For FP of current path is 54

                FP_is_54(element) = FP_is_54(element) + 1; % Update number of paths ending in 54 where current node (element) appears
    
            end

        end

    end

end

% Display dictionary storing number of occurences corresponding to each node
disp(countsDictionary);

% Visualize frequency of number of occurences vs. number of occurences
counts = values(countsDictionary); % Extract number of occurences from dictionary storing counts

edges = 1:51; % Define bin edges for histogram (based on min and max of counts)

histogram_plot = histogram(counts, edges); % Plot histogram

% Create and display table to store number of times a node is found to culminate into a FP
FPsTable = table(Node, FP_is_20, FP_is_45, FP_is_54); % Create table

disp(FPsTable); % Display table

% Create dictionary to store which FPs follow the 2 most occuring states
FPs = [20, 45, 54]; % All fixed points row vector

% 45 (51 times) & 61 (49 times) occur most frequently in all longest paths

nodeIDs = [45, 61]; % 2 most occuring states states across longest paths

for inNodeIDs = 1:length(nodeIDs) % Iterate through most occuring states row vector

    currentNode = nodeIDs(inNodeIDs); % Extract current node (state)

    for inFPs = 1:length(FPs) % Iterate through all FPs

        if inFPs == 1 % For FP is 20
    
            FPoccurences{inNodeIDs}(inFPs) = FP_is_20(currentNode); % Extract number of current node appearances for current FP

        elseif inFPs == 2 % For FP is 45

            FPoccurences{inNodeIDs}(inFPs) = FP_is_45(currentNode); % Extract number of current node appearances for current FP

        elseif inFPs == 3 % For FP is 54

            FPoccurences{inNodeIDs}(inFPs) = FP_is_20(currentNode); % Extract number of current node appearances for current FP

        end

    end

end

% Create dictionary to store information about 2 most occuring states across all longest paths
mostCommonStateFigs = dictionary(nodeIDs, FPoccurences);

% Display created dictionary
disp('Frequency of culminating into 20, 45, and 54 respectively:')
disp(mostCommonStateFigs);

% Pie chart to visualize percentage of paths ending in 1, 2, and all (3) fixed points
% and dictionary to store nodes in categories based on number of following distinct FPs
categories = ["1_FP", "2_FPs", "3_FPs"]; % Categories of nodes based on how many different fixed points are seen when they appear in a path as dictionary keys

nodesFPsValues = {zeros(1, 0), zeros(1, 0), zeros(1, 0)}; % Initialize variable to store nodes associated with fixed points for dictionary values

categoriesPie = ["Node paths end in 1 FP"; "Node paths end in 2 FPs"; "Node paths end in all 3 FPs"]; % Categories to compare node FPs for pie chart

numbers = zeros(3, 1); % Initialize number of nodes which end in 1, 2, or all (3) FPs for pie chart

rowVariables = FPsTable.Variables; % Extract all data from FPs table

sizeRowVariables = size(rowVariables); % Extract number of rows in FPs table

for inFPsTable = 1:sizeRowVariables(1) % Iterate through each row of FPs table data

    row = rowVariables(inFPsTable, 2:end); % Extract node-following FP data from current row in table data

    endsInFP20 = logical(row(1)); % Logical value to check if any paths with current node (row) end in the FP 20

    endsInFP45 = logical(row(2)); % Logical value to check if any paths with current node (row) end in the FP 45

    endsInFP54 = logical(row(3)); % Logical value to check if any paths with current node (row) end in the FP 54

    logicalRow = [endsInFP20, endsInFP45, endsInFP54]; % Collection of whether ends in specific FP

    if sum(logicalRow == 1) == 1 % If only 1 FP appears

        numbers(1) = numbers(1) + 1; % Update numbers column vector element for 1 FP

        nodesFPsValues{1}(end + 1) = rowVariables(inFPsTable, 1); % Update dictionary values row vector for 1 FP

    elseif sum(logicalRow == 1) == 2 % If 2 FPs appear

        numbers(2) = numbers(2) + 1; % Update numbers column vector element for 2 FPs

        nodesFPsValues{2}(end + 1) = rowVariables(inFPsTable, 1); % Update dictionary values row vector for 2 FPs

    elseif sum(logicalRow == 1) == 3 % If all 3 FPs appear

        numbers(3) = numbers(3) + 1; % Update numbers column vector element for 3 FPs

        nodesFPsValues{3}(end + 1) = rowVariables(inFPsTable, 1); % Update dictionary values row vector for 3 FPs

    end

end

tbl = table(categoriesPie, numbers); % Create table to make piechart

piechart(tbl,"numbers", "categoriesPie"); % Make piechart using the created table and used variables

nodesFPsDictionary = dictionary(categories, nodesFPsValues); % Create dictionary using keys and values

disp('Nodes and number of different FPs following them:') % Display created dictionary
disp(nodesFPsDictionary);
