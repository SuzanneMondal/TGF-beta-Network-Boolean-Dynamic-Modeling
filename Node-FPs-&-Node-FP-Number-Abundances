% All paths starting from all nodes and ending in all nodes
startNodes = 1:64; % Array of first nodes in paths

endNodes = 1:64; % Array of final nodes in paths

paths = {}; % Initialize cell to store all possible paths

for inStartNodes = startNodes % Iterate through first nodes

    for inEndNodes = endNodes % Iterate through final nodes

        paths{end + 1} = allpaths(G, startNodes(inStartNodes), endNodes(inEndNodes)); % Store all paths from first node to final node

    end
    
end

% Function to find number of distinct FPs in which paths starting from each node end and their abundances
function distinctFPsDictionary = howManyFPs(paths)

nodes = 1:64; % Initialize paths' first nodes array

numberOfFPs = zeros(1, 64); % Initialize first node-corresponding distinct FPs

for inPaths = nodes % Iterate through each first node

    if inPaths ~= 1 % For all first nodes except node 1

        forNode = inPaths - 1; % Term in product to reach current node's paths in paths cell

        pathCell20 = paths{1, (forNode*64) + 20}; % Extract current node's paths which end in FP node 20

        pathCell45 = paths{1, (forNode*64) + 45}; % Extract current node's paths which end in FP node 45

        pathCell54 = paths{1, (forNode*64) + 54}; % Extract current node's paths which end in FP node 54

    else % For first node = node 1

        pathCell20 = paths{1, 20}; % Extract paths which end in FP node 20

        pathCell45 = paths{1, 45}; % Extract paths which end in FP node 45

        pathCell54 = paths{1, 54}; % Extract paths which end in FP node 54

    end

    if ~isempty(pathCell20) % For paths between current first node and node 20 existing

        numberOfFPs(inPaths) = numberOfFPs(inPaths) + 1; % Update number of distinct FPs corresponding to current first node

    end

    if ~isempty(pathCell45) % For paths between current first node and node 45 existing

        numberOfFPs(inPaths) = numberOfFPs(inPaths) + 1; % Update number of distinct FPs corresponding to current first node

    end

    if ~isempty(pathCell54) % For paths between current first node and node 54 existing

        numberOfFPs(inPaths) = numberOfFPs(inPaths) + 1; % Update number of distinct FPs corresponding to current first node

    end

end

% Create and display dictionary mapping number of distinct FPs that appear at the end of paths from each first node
distinctFPsDictionary = dictionary(nodes, numberOfFPs); % Create dictionary

disp("Number of distinct FPs paths starting from node end in:")

disp(distinctFPsDictionary); % Display dictionary

% Find abundances of FPs' appearance across all graph paths
numOfNodesW1FP = sum(numberOfFPs == 1); % Abundance of first nodes which end in only 1 FP

numOfNodesW2FPs = sum(numberOfFPs == 2); % Abundance of first nodes which end in 2 FPs

numOfNodesW3FPs = sum(numberOfFPs == 3); % Abundance of first nodes which end in all 3 FPs

disp(['Number of nodes ending in 1 FP is ', num2str(numOfNodesW1FP), ',', ...
    ' those ending in 2 FPs are ', num2str(numOfNodesW2FPs), ', and those ending in all FPs are ', ...
    num2str(numOfNodesW3FPs), '.']); % Display abundances

end

% Invoke function to get number of distinct FPs and their respective abundances
distinctFPsDictionary = howManyFPs(paths);
